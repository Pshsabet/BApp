#!/usr/local/bin/python
# -*- coding: utf-8 -*-
import time
import numpy as np
import pandas as pd
import ta
import pytse_client as tse
# import arabic_reshaper
# from bidi.algorithm import get_display
# def text_changer(text):
#     a = get_display(arabic_reshaper.reshape(text))
#     return a
buy = []
sell = []
n = ["ثمسکن"]
all_tickers = ['18719101', 'آ س پ', 'آبادا', 'آبین', 'آتیمس', 'آرمان', 'آریا', 'آریان', 'آساس', 'آسام', 'آسامید', 'آسیا', 'آسیاتک', 'آوا', 'آپ', 'آکنتور', 'آکورد', 'آگاس', 'اتکام', 'اتکای', 'اخابر', 'ارزش', 'ارفع', 'ارمغان', 'اروند', 'استارز', 'اطلس', 'اعتلا', 'اعتماد', 'افرا', 'افران', 'افق ملت', 'افق', 'البرز', 'الماس', 'امید', 'امین یکم', 'امین', 'انرژی1', 'انرژی2', 'انرژی3', 'اوان', 'اوصتا', 'اپال', 'اپرداز', 'اکالا', 'اکتیو', 'باختر', 'بالاس', 'بالبر', 'بایکا', 'بترانس', 'بتک', 'بجهرم', 'بخاور', 'بذر', 'برانسفو', 'برکت', 'بزاگرس', 'بساما', 'بسویچ', 'بشهاب', 'بفجر', 'بموتو', 'بمپنا', 'بمیلا', 'بنو', 'بنیرو', 'بهپاک', 'بورس', 'بوعلی', 'بپاس', 'بپیوند', 'بکاب', 'بکام', 'بکهنوج', 'بگیلان', 'تابا', 'تاصیکو', 'تاپکیش', 'تاپیکو', 'تایرا', 'تبرک', 'تدبیر', 'تراک', 'تشتاد', 'تصمیم', 'تفیرو', 'تلیسه', 'تماوند', 'تمحرکه', 'تمدن', 'تملت', 'تنوین', 'توریل', 'توسن', 'تپمپی', 'تپولا', 'تپکو', 'تکالا', 'تکشا', 'تکمبا', 'تکنار', 'تکنو', 'تیپیکو', 'ثاباد', 'ثاخت', 'ثاصفا', 'ثالوند', 'ثامان', 'ثامید', 'ثاژن', 'ثباغ', 'ثبهساز', 'ثتران', 'ثتوسا', 'ثجوان', 'ثروت', 'ثروتم', 'ثرود', 'ثزاگرس', 'ثشاهد', 'ثشرق', 'ثعتما', 'ثعمرا', 
'ثغرب', 'ثفارس', 'ثقزوی', 'ثمسکن', 'ثملی', 'ثنور', 'ثنوسا', 'ثهام', 'ثپردیس', 'جم پیلن', 'جم', 'جهرم', 'جوین', 'حآسا', 'حآفرین', 'حاریا', 'حامی1401', 'حتاید', 'حتوکا', 'حخزر', 'حریل', 'حسیر', 'حسینا', 'حشکوه', 'حفارس', 'حفاری', 'حفجر', 'حپارسا', 'حپترو', 'حکشتی', 'حگردش', 'خاتم', 'خاذین', 'خاهن', 'خاور', 'خبازرس', 'خبنیان', 'خبهمن', 'ختراک', 'ختور', 'ختوقا', 'خدیزل', 'خراسان', 'خریخت', 'خرینگ', 'خزامیا', 'خزر', 'خساپا', 'خشرق', 'خصدرا', 'خعمرا', 'خفناور', 'خفنر', 'خفولا', 'خلنت', 'خلیبل', 'خمحرکه', 'خمحور', 'خمهر', 'خموتور', 'خنصیر', 'خودرو', 'خودکفا', 'خوساز', 'خپارس', 'خپویش', 'خچرخش', 'خکار', 'خکاوه', 'خکرمان', 'خکمک', 'خگستر', 'دابور', 'دارا یکم', 'دارا', 'داراب', 'دارو', 'داریک', 'داسوه', 'دالبر', 'دامین', 'دانا', 'داوه', 'دبالک', 'دتماد', 'دتهران', 'دتوزیع', 'دتولید', 'دجابر', 'دحاوی', 'ددام', 'درازک', 'درهآور', 'دروز', 'دزهراوی', 'دسانکو', 'دسبحا', 'دسبحان', 'دسینا', 'دشیری', 'دشیمی', 'دعبید', 'دفارا', 'دفرا', 'دقاضی', 'دلر', 'دلقما', 'دماوند', 'دمعیار', 'دپارس', 'دکوثر', 'دکپسول', 'دکیمی', 'دی', 'دیران', 'دیسشپ', 'ذوب', 'رافزا', 'رانفور', 'رتاپ', 'رتکو', 'رمپنا', 'رنیک', 'رکیش', 'ریشمک', 'زاگرس', 'زبینا', 'زدشت', 'زر', 'زرین', 'زشریف', 'زشگزا', 'زفکا', 'زماهان', 'زملارد', 'زمگسا', 'زنجان', 'زنگان', 'زپارس', 'زکشت', 'زکوثر', 'زگلدشت', 'سآبیک', 'ساذری', 'ساراب', 'ساربیل', 'ساروج', 'ساروم', 'سامان', 'ساوه', 'سایرا', 'ساینا', 'سباقر', 'سبجنو', 'سبزوا', 'سبهان', 'ستران', 'سجام', 'سحرخیز', 'سخاش', 'سخزر', 'سخند', 'سخوز', 'سدبیر', 'سدشت', 'سدور', 'سرو', 'سرود', 'سرچشمه', 'سشرق', 'سشمال', 'سصفها', 'سصوفی', 'سغدیر', 'سغرب', 'سفار', 'سفارس', 'سفارود', 'سفاسی', 'سفاسیت', 'سفانو', 'سقاین', 'سلار', 'سمازن', 'سمایه', 'سمتاز', 'سمگا', 'سنوین', 'سنیر', 'سهرمز', 'سهگمت', 'سپ', 'سپاس', 'سپاها', 'سپح', 'سپر', 'سپرمی', 'سپید', 'سپیدار', 'سپیدما', 'سکارون', 'سکرد', 'سکرما', 'سیتا', 'سیدکو', 'سیستم', 'سیلام', 'سیمرغ', 'سینا', 'سیناد', 'شاراک', 'شاروم', 'شاملا', 'شاوان', 'شبریز', 'شبصیر', 'شبندر', 'شبهرن', 'شتران', 'شتهران', 'شتولی', 'شتوکا', 'شجم', 'شجی', 'شخارک', 'شدوص', 'شراز', 'شرانل', 'شرنگی', 'شزنگ', 'شساخت', 'شستا', 'شستان', 'شسم', 'شسپا', 'شسینا', 'شصدف', 
'شصفها', 'شغدیر', 'شفا', 'شفارا', 'شفارس', 'شفن', 'شلرد', 'شلعاب', 'شلوان', 'شمواد', 'شنفت', 'شوش', 'شوینده', 'شپارس', 'شپاس', 'شپاکسا', 'شپترو', 'شپدیس', 'شپلی', 'شپمچا', 'شپنا', 'شکام', 'شکبیر', 'شکربن', 'شکف', 'شکلر', 'شگل', 'شگویا', 'شیراز', 'شیران', 'صایند', 'صبا', 'صنوین', 'طلا', 'عسیرجان', 'عپلی جم', 'عیار', 'غاذر', 'غالبر', 'غبشهر', 'غبهار', 'غبهنوش', 'غبهپاک', 'غدام', 'غدشت', 'غدیس', 'غزر', 'غساسا', 'غسالم', 'غشاذر', 'غشان', 'غشصفا', 'غشهد', 'غشهداب', 'غصینو', 'غفارس', 'غمارگ', 'غمهرا', 'غناب', 'غنوش', 'غنیلی', 'غویتا', 'غپآذر', 'غپاک', 'غپونه', 'غپینو', 'غچین', 'غکورش', 'غگرجی', 'غگز', 'غگل', 'غگلستا', 'غگلپا', 'غگیلا', 'غیوان', 'فاذر', 'فاراک', 'فارس', 'فاسمین', 'فافزا', 'فافق', 'فالوم', 'فاما', 'فاهواز', 'فایرا', 'فباهنر', 'فبستم', 'فبیرا', 'فتوسا', 'فجام', 'فجر', 'فجهان', 'فجوش', 'فخاس', 'فخوز', 'فرآور', 'فرابورس', 'فراز', 'فردا', 'فروس', 'فروم', 'فروی', 'فزرین', 'فسا', 'فساز', 'فسازان', 'فسبزوار', 'فسدید', 'فسرب', 'فسلیر', 'فسپا', 'فلات', 'فلامی', 'فلوله', 'فماک', 'فمتال', 'فمراد', 'فملی', 'فن آوا', 'فنرژی', 'فنفت', 'فنوال', 'فنورد', 'فولاد', 'فولاژ', 'فولای', 'فوکا', 'فپارس', 'فپنتا', 'فکمند', 'فگستر', 'فیروزا', 'فیروزه', 'قاروم', 'قثابت', 'قجام', 'قرن', 'قزوین', 'قستان', 'قستون', 'قشرین', 'قشهد', 'قشکر', 'قشیر', 'قصفها', 'قلرست', 'قمرو', 'قنقش', 'قنیشا', 'قهکمت', 'قپارس', 'قپیرا', 'قچار', 'قیستو', 'لابسا', 'لازما', 'لبهمن', 'لبوتان', 'لجام', 'لخانه', 'لخزر', 'لسرما', 'لطیف', 'لمخابر', 'لوتوس', 'لپارس', 'لپویا', 'لپیام', 'لکما', 'ما', 'مادیرا', 'مارون', 'مانی', 'مبین', 'مدار', 'مداران', 'مدیر', 'مدیریت', 'مرقام', 'معیار', 'مفاخر', 'ملت', 'میدکو', 'نبروج', 'نبورس', 'نتوس', 'نشار', 'نطرین', 'نمرینو', 'نهال', 'نوآور', 'نوری', 'نوین', 'نکالا', 'نگین', 'نیرو', 'های وب', 'هجرت', 'هرمز', 'همای', 'همراه', 'وآتوس', 'وآذر', 'وآردل', 'وآفری', 'وآوا', 'واتی', 'واحصا', 'واحیا', 'وارس', 'واعتبار', 'والبر', 'وامید', 'وامین', 'وانصار', 'وایرا', 'وایران', 'وبازار', 'وبانک', 'وبشهر', 'وبصادر', 'وبملت', 'وبهمن', 'وبوعلی', 'وبیمه', 'وتجارت', 'وتعاون', 'وتوس', 'وتوسم', 'وتوشه', 'وتوصا', 'وتوکا', 'وثخوز', 'وثنو', 'وثوق', 'وجامی', 'وحافظ', 'وحکمت', 'وخارزم', 'وخاور', 'ودی', 'ورازی', 'ورنا', 'وزمین', 'وساخت', 'وساربیل', 'وساشرقی', 'وساغربی', 'وسالت', 'وساپا', 'وسبحان', 'وسبوشهر', 'وسخراج', 'وسخراش', 'وسخوز', 'وسدید', 'وسرضوی', 'وسرمد', 'وسزنجان', 'وسصفا', 'وسفارس', 'وسقزوین', 'وسقم', 'وسلرستا', 'وسمازن', 'وسمحال', 'وسمرکز', 'وسنا', 'وسهرمز', 'وسهمدا', 'وسپه', 'وسپهر', 'وسکاب', 'وسکرد', 'وسکرشا', 'وسکرمان', 'وسکهبو', 'وسگلستا', 'وسگیلا', 'وسیزد', 'وسیستا', 'وسیلام', 'وسین', 'وسینا', 'وشمال', 'وصنا', 'وصندوق', 'وصنعت', 'وغدیر', 'ولانا', 'ولبهمن', 'ولتجار', 'ولراز', 'ولساپا', 'ولشرق', 'ولصنم', 'ولغدر', 'ولملت', 'ولنوین', 'ولپارس', 'ولکار', 'ولیز', 'ومدیر', 'ومشان', 'ومعادن', 'ومعلم', 'ومعین', 'وملت', 'وملل', 'وملی', 'ومهان', 'ونفت', 'ونوین', 
'ونیرو', 'ونیکی', 'وهامون', 'وهنر', 'وهور', 'وپارس', 'وپاسار', 'وپترو', 'وپخش', 'وپسا', 'وپست', 'وپویا', 'وکادو', 'وکار', 'وکبهمن', 'وگستر', 'ویسرو', 'پادا', 'پارتا', 'پارس', 'پارسان', 'پارسیان', 'پارند', 'پاسا', 'پالایش', 'پاکشو', 'پتایر', 'پترول', 'پخش', 'پدرخش', 'پدنا', 'پرداخت', 'پردیس', 'پرشیا', 'پسهند', 'پشاهن', 'پلاست', 'پلاسک', 'پلوله', 'پویا', 'پکرمان', 'پکویر', 'پکیان', 'پیزد', 'چافست', 'چبسپا', 'چخزر', 
'چدن', 'چفیبر', 'چنوپا', 'چکارم', 'چکارن', 'چکاوه', 'چکاپا', 'کابگن', 'کاذر', 'کاردان', 'کاریس', 'کارین', 'کاسپین', 'کاصفا', 'کالا', 'کاما', 'کامیاب', 'کاوه', 'کایتا', 'کایگچ', 'کباده', 'کبافق', 'کبورس', 'کترام', 'کتوکا', 'کحافظ', 'کخاک', 'کدما', 'کرازی', 'کرماشا', 'کرمان', 'کروی', 'کزغال', 'کساوه', 'کساپا', 'کسرا', 'کسرام', 'کسعدی', 'کشرق', 'کصدف', 'کطبس', 'کفرآور', 'کفرا', 'کفپارس', 'کقزوی', 'کلر', 'کلوند', 'کماسه', 'کمرجان', 'کمند', 'کمنگنز', 'کمینا', 'کنور', 'کنیلو', 'کهرام', 'کهربا', 'کهمدا', 'کوثر', 'کورز', 'کویر', 'کپارس', 'کپرور', 'کپشیر', 'کچاد', 'کچینی', 'کگاز', 'کگل', 'کگهر', 'کی بی سی', 'کیا', 'کیان', 'کیسون', 'کیمیا', 'کیمیاتک', 'گدنا', 'گشان', 'گنجین', 'گنگین', 'گوهر', 'گوهران', 'گپارس', 'گکوثر', 'گکیش', 'یاقوت']

tickers_list = ['آرمان', 'آسامید', 'آسیا', 'آگاس', 'اتکام', 'اتکای', 'اخابر', 'ارمغان', 'اعتماد', 'افران', 'افق', 'البرز', 'امین یکم', 'اوان', 'اوصتا', 'اپرداز', 'بالاس', 'بترانس', 'بجهرم', 'بخاور', 'برکت', 'بساما', 'بمیلا', 'بپاس', 'تاصیکو', 'تاپکیش', 'تاپیکو', 'تصمیم', 'تکنار', 'ثاخت', 'ثباغ', 'ثمسکن', 'ثنور', 'جم', 'حتاید', 'حخزر', 'حسینا', 'حفارس', 'حفاری', 'حکشتی', 'ختور', 'ختوقا', 'خریخت', 
'خزامیا', 'خساپا', 'خصدرا', 'خودرو', 'خپارس', 'خکرمان', 'خگستر', 'دامین', 'دانا', 'دروز', 'ذوب', 'رمپنا', 'رنیک', 'ساراب', 'سباقر', 'سبزوا', 'ستران', 'سخوز', 'سرو', 'سشرق', 'سشمال', 'سغرب', 
'سفارس', 'سمازن', 'سمتاز', 'سپ', 'سپاس', 'سیستم', 'سیمرغ', 'شاوان', 'شبریز', 'شبندر', 'شتران', 
'شرانل', 'شساخت', 'شستا', 'شسپا', 'شفارا', 'شپاس', 'شپترو', 'شپنا', 'غصینو', 'فاراک', 'فارس', 'فایرا', 'فخوز', 'فلوله', 'فولاد', 'ما', 'مادیرا', 'نوری', 'نوین', 'های وب', 'هرمز', 'همراه', 'وامید', 'وبانک', 'وبصادر', 'وبملت', 'وتجارت', 'وتعاون', 'وحافظ', 'وحکمت', 'وخاور', 'ودی', 'ورنا', 'وزمین', 'وسالت', 'وساپا', 'وسخوز', 'وسرضوی', 'وسپه', 'وسین', 'وسینا', 'وصندوق', 'وصنعت', 'وغدیر', 'ومعادن', 'ومعلم', 'وملل', 'ومهان', 'ونفت', 'ونوین', 'وهور', 'وپارس', 'پارسان', 'پارسیان', 'پارند', 'پترول', 'پرداخت', 'کاما', 'کاوه', 'کبافق', 'کخاک', 'کدما', 'کرازی', 'کروی', 'کزغال', 'کشرق', 'کطبس', 'کفرآور', 'کماسه', 'کمند', 'کمنگنز', 'کمینا', 'کنور', 'کوثر', 'کویر', 'کپرور', 'کچاد', 'کگاز', 'کگل', 'کگهر', 'کیان', 'یاقوت']
# yesOrno = input("enter: ")
# if yesOrno == "y":
#     for a in n:
#         try:
#             print(a)
#             tickers = tse.download(
#                 symbols=a, include_jdate=True, write_to_csv=True)
#         except:
#             print(f"{a}--error")
# if yesOrno == "ya":
#     tickers = tse.download(symbols="all",write_to_csv=True)
#     print("finish")
# else:
#     pass
def download_tickers():
    tickers = tse.download(symbols="all",write_to_csv=True,include_jdate=True)
def download_ticker(symbol):
    tickers = tse.download(symbols=symbol,write_to_csv=True,include_jdate=True)


# for ticker in tickers_list:
#     # //NOTE - I should change the tickers_list or all_tickers
#     df = pd.read_csv(f'tickers_data/{ticker}.csv', sep=',')
#     df = dropna(df)
#     close = df["close"]
#     high = df["high"]
#     low = df["low"]
#     volume = df["volume"]
#     indicator_rsi = ta.momentum.rsi(df["close"], 14)
#     indicator_ema = ta.trend.ema_indicator(df["close"], 50)
#     vortex_indicator_p = ta.trend.vortex_indicator_pos(high, low, close, 24)
#     vortex_indicator_n = ta.trend.vortex_indicator_neg(high, low, close, 24)
    
#     ir = list(indicator_rsi)[-1]
#     ema = list(indicator_ema)[-1]
#     vrp = list(vortex_indicator_p)[-1]
#     vrn = list(vortex_indicator_n)[-1]
#     if ir >= 55:
#         if ema >= 50:
#             if vrp > vrn:
#                 if list(volume)[-1] > 1000000:
#                     buy.append(ticker)
#                     print(ticker, list(volume)[-1])


def num_to_percent(x, y):
    result = x * 100 / y
    return result

def percent_to_num(num, percent):
    result = num * (100+percent) / 100
    return result

def ichimoku_ema():
    global all_tickers
    buy = []
    natural = []
    time_zone = -1
    for symbol in all_tickers:
        df = pd.read_csv(fr'tickers_data/{symbol}.csv', sep=',')
        # df = dropna(df)
        close = df["close"]
        high = df["high"]
        low = df["low"]
        indicator_ema = ta.trend.ema_indicator(df["close"], 30)
        indicator_ichimoku = ta.trend.ichimoku_base_line(high, low, 9, 26)

        ema_1 = list(indicator_ema)[time_zone]
        ema_2 = list(indicator_ema)[time_zone-1]
        ichimoku = list(indicator_ichimoku)
        highest_channel = 0
        midline_channel = ichimoku[time_zone]
        lowest_channel = list(close)[time_zone]

        # print(symbol, list(close)[time_zone], ema_1)
        if list(close)[time_zone-1] <= ema_2:
            if list(close)[time_zone] >= ema_1:
                ep = list(close)[time_zone]
                decimals = len(str(ep).split(".")[1])
                ichi_num = 0 # use for this loop
                for a in range(-time_zone,-time_zone+51):
                    mid = ichimoku[-(a)]
                    if mid == midline_channel:
                        ichi_num += 1
                        if ichi_num == 3:
                            break
                    else:
                        midline_channel = mid
                        ichi_num = 1
                        
                for a in range(-time_zone,-time_zone+51):
                        l = list(close)[-(a)]
                        if l <= lowest_channel:
                            lowest_channel = l
                highest_channel = round(percent_to_num(ep, -round(num_to_percent(lowest_channel, ep) - 100,2)),decimals)
                print(symbol,ep,lowest_channel,midline_channel,highest_channel)
                buy.append(symbol)
def Cross_MA_6_12():
    buy = []
    natural = []
    for symbol in tickers_list:
        df = pd.read_csv(fr'tickers_data/{symbol}.csv', sep=',')
        # df = dropna(df)
        close = df["close"]
        indicator_ma_6 = ta.volatility.bollinger_mavg(close, 6)
        indicator_ma_12 = ta.volatility.bollinger_mavg(close, 12)
        indicator_ma_20 = ta.volatility.bollinger_mavg(close, 20)
        ma_6 = list(indicator_ma_6)
        print(symbol)
        ma_12 = list(indicator_ma_12)
        ma_20 = list(indicator_ma_20)
        ma_6_2 = list(indicator_ma_6)
        ma_12_2 = list(indicator_ma_12)
        ma_20_2 = list(indicator_ma_20)
        if ma_6_2[-2] <= ma_12_2[-2]:
            if ma_6[-1] >= ma_12[-1]:
                buy.append(symbol)
    return buy
def Cross_EMA_30():
    buy = []
    natural = []
    for symbol in all_tickers:
        df = pd.read_csv(fr'tickers_data/{symbol}.csv', sep=',')
        # df = dropna(df)
        close = df["close"]
        indicator_ema = ta.trend.ema_indicator(df["close"], 50)
        ema_1 = list(indicator_ema)[-1]
        ema_2 = list(indicator_ema)[-2]
        close_1 = list(close)[-1]
        close_2 = list(close)[-2]
        if 100-(round(ema_1 * 100 / close_1,0)) < 10:
                buy.append(symbol)
    return(buy)

def Cross_RSI_14():
    buy = []
    for symbol in all_tickers:
        df = pd.read_csv(fr'tickers_data/{symbol}.csv', sep=',')
        # df = dropna(df)
        try:
            close = df["close"]
            indicator_rsi = ta.momentum.rsi(df["close"], 14)
            rsi_1 = list(indicator_rsi)[-1]
            rsi_2 = list(indicator_rsi)[-2]
            close_1 = list(close)[-1]
            close_2 = list(close)[-2]
            if rsi_2 <= 55:
                if rsi_1 > 55:
                    buy.append(symbol)
        except:
            pass
    return(buy)
# for ticker in buy:
#     print(ticker)
